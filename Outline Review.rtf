{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww21300\viewh8820\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
# Overview of what I am going to talk about\
	. Why I picked this topic\
	. Tips, tricks and links\
	. Quick Help Markdown\
	. Understanding the current swift documentation \
	. Element of Swift documentation that might be hard to follow \
		. protocols and how much they are used in Swift 2.2\
		. quick overview of generics \
	. Spelunking \
		. Source code\
\
\
# NOTES:\
	* Make sure you have the latest documentation!\
		. might need to have them download it\
\
# QUESTIONS:\
	? why is Void a tuple\
	? do all functions naturally return Void if it doesn\'92t have a defined return type\
	? Does the tuple if us things that we doing know about\
\
# Flesh out more of my thought\
	# Why I picked this topic\
		# Documentation in general\
			- is boring\
			- can be incorrect and or misleading\
			- I generally don\'92t document my code\
			? So why do a presentation about it\
				+ because I believe it is an under used tool\
				+ I believe it is an important tool			\
					+ have a mental model of how the system work that you are working in helps you make better decisions about what you are coding\
						+ what slows down the system\
						+ At what point is it best to interface with the system\
						+ what shouldn\'92t you do\
						+ what are general best practices \
						+ Can push the boundaries instead of staying in them\
		# I believe that Stack Overflow has made me a worst developer\
			+ It is faster to do SO \
			+ You can find really good answer to questions\
			+ It can help you with a resume \
			+ Very helpful when you know very little about the topic and need directions\
			- incorrect answers (wrong or no longer correct)\
			- misleading or simple answers\
			- I started not caring about what I was coding as long as it worked\
		* An interesting argument for why this is bad\
			- That I am becoming pigeon hole in a very small field that eventually may change \
			. This can be a danger or a plus depending on how you work and what you like to work on\
			+ Specialization can lead to more money and interesting work \
		# I believe that for me the correct answer was to limit my use of SO\
			. I try to only use SO when I am looking at a new problem \
			. When my question is \'93What is\'85\'94 rather then \'93How do I do\'85\'94 \
		* I don\'92t know if I should spend a lot of time on this, but merely state that I believe SO is something I try to make it the last source I turn too.\
		# Because of my opinion of SO, I get asked a lot about what do I do?\
			. I read the documentation\
			. I review the docs provided by Apple first\
			. I review use demos projects and playgrounds a lot to test ideas\
			. I try to use wiki\
			. I try to keep track of interesting bloggers and articles\
			. I am working on a local documenting system that is structure to how I like it\
			. Then I use SO, but I tried to have a direct question that I am trying to answer \
			. Or in other words I take a proactive approach to learning what I am doing \
			# Because of these questions and some suggestions form Diana I decided that I would do this presentation\
				. What I am going to talk about is generally my opinions they might not be right or even work for you\
				. I don\'92t think the things I will present are new or amazing topics\
	# Tips, Tricks and links\
		. Playgrounds\
		. Keyboard shortcuts\
			. side panel \
				. left \
					. command + 0 \
				. right\
					. command + option + 0 (close/close)\
					. command + option + 2 (open)\
			. command + ctrl + j to jump to definition\
				. command + left arrow (to move back)\
			. ctrl + 6 (Show Document Items)\
				. start typing to find something\
			. ctrl + 1 (Show related Items)\
			. option key + mouse click (?)\
			. command + tab (new tab)\
			. command + shift `\{` or `\}` (move between tabs)\
			. command + shift + o\
				. for searching\
			command + shift 0\
				. pull up documentation and API Reference\
		# Quick Help\
			. shows the information about the currently selected item\
			. Allows you to jump to code or reference documentation\
		* I spend a fair amount of time in the API Reference documentation \
			- it works well\'85 enough\
			- I would like a better system\
			+ still looking into different documentation tools\
		# Links\
			. https://swift.org\
			. https://swift.org/blog/\
			. https://developer.apple.com/swift/\
			. https://developer.apple.com/swift/blog/\
			. https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html\
			. https://developer.apple.com/library/ios//documentation/General/Reference/SwiftStandardLibraryReference/index.html#structures\
			. https://github.com/apple/swift\
			. https://github.com/apple/swift-evolution\
			. http://swiftdoc.org\
				+ I like this to get an understanding of the hierarchy of the system\
	# Quick Help Markdown\
		# links\
			. https://developer.apple.com/library/mac/documentation/Xcode/Reference/xcode_markup_formatting_ref/\
		* I think this will mostly be a demoing section\
		* There is a different between playground and regular code and formatting \
		# demo	\
			. how to document a function\
			. how to add sections\
			. document a class\
			* play around with this and see what items would be good to talk about\
		# over doing documentation\
			* have an example of bad practice\
				. every item documented \
			- code changes\
			- self obvious what it is doing \
			- easy to forget \
			- most people don\'92t read header (to my annoyance)\
			+ if making a framework doing this is helpful\
			+ if something isn\'92t clear\
			+ I would recommend you add this your class, struct, and protocol  \
	# Understanding the current swift documentation \
		. functions\
			. func doSomething() -> void\
			. _\
				. default to at the front		\
				. in the middle means it is ignored\
			. Void type\
				. func a()\
				. func a() -> Void\
				. func a() -> ()\
			. External Parameter names\
				. func a(a: Int, b something: String)  b is what consumers of function use, while you use something\
			. Default parameters \
				. func a(a: int, b: Int = 0)\
			. Variadic parameters\
				.   \'93\'85\'94 \
				. access as an array\
				. print(\'93string 1\'94, \'93string 2\'94)\
			. inout\
				. say that the function is going to modify the value\
		. closures \
			. () -> ()\
			. func a(a: () -> ()) -> () -> ()\
			. func a(a: Void -> Void) -> Void -> Void \
		. attributes\
			. @available\
			. @noescape\
			. @NSApplicationMain\
			. @warn_unused_result\
		. typealias\
			. typealias Void = ()\
		. tuples\
			. func a(a: (b: int, c: int))\
			. func a(a: (b: string, c: () -> ())) -> (d: String, e: String)\
		+ keep an eye on where your \'91()\'92 and \'91->\'92 are\
	# Element of Swift documentation that might be hard to follow \
		* now there are some even more confusing items that we should take a closer look at\
		# protocols\
			* look at the code \
			# duck example\
			# show how everything is mostly a protocol \
		# generics\
	# Spelunking\
		* Now have now gone through and reviewed the basic understanding we should need to start understanding the documentation			. Or at least have an idea what we are looking at and where and what we should be searching for\
		? Where do we go from here\
			. The source code\
			. take a little bit of time to review a small section of it\
			. review the swift github evolutions \
			\
	\
			\
			\
			\
			\
		\
		\
		\
}